###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       28/Nov/2017  16:24:32
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\csnrprotocol\cnscpackdeal.c
#    Command line =  
#        "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\csnrprotocol\cnscpackdeal.c"
#        -D USE_STDPERIPH_DRIVER -lCN
#        "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\Flash\List"
#        -o "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\Flash\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\uCOS-III\IAR\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\crccheck\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\csnrprotocol\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\IAP_pragram\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\usart\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\ST\STM32\inc\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\CMSIS\CM3\CoreSupport\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\Flash\List\cnscpackdeal.lst
#    Object file  =  
#        F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III -
#        副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\Flash\Obj\cnscpackdeal.o
#
###############################################################################

F:\iar\Micrium_uC-Eval-STM32F107_uCOS-III - 副本\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\csnrprotocol\cnscpackdeal.c
      1          #include  "csnr_package_deal.h"
      2          #include  "includes.h"
      3          //#include  "CrcCheck.h"
      4          
      5          
      6          //数据打包，根据stcCsnrProtocolPara信息，将数据打包成CNSR数据
      7          //

   \                                 In section .text, align 2, keep-with-next
      8          void	DataPackage_CSNR(stcCsnrProtocolPara sprotocolpara,unsigned char 	*csnrbuf,unsigned char 	*csnrlen)
      9          {
   \                     DataPackage_CSNR: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0xB0C2             SUB      SP,SP,#+264
   \   00000006   0x001C             MOVS     R4,R3
   \   00000008   0x9D4E             LDR      R5,[SP, #+312]
     10          	unsigned char		SndBuf[256] = {0};
   \   0000000A   0xA801             ADD      R0,SP,#+4
   \   0000000C   0xF44F 0x7180      MOV      R1,#+256
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
     11          	unsigned char		SumCheck8;
     12          	unsigned short	    Crc16;
     13          	unsigned short	    AddHeadNum;
     14          	unsigned short	    i;
     15          	unsigned char		ByteStation;
     16          	unsigned char 	    FramNum =0;						//序号
   \   00000014   0xF05F 0x0900      MOVS     R9,#+0
     17          	unsigned char		DataLen;
     18          	
     19          	ByteStation = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x4683             MOV      R11,R0
     20          	SndBuf[ByteStation++] = FRAM_HERD0;
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0xA901             ADD      R1,SP,#+4
   \   00000020   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000024   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   00000028   0xF11B 0x0B01      ADDS     R11,R11,#+1
     21          	SndBuf[ByteStation++] = FRAM_HERD1;
   \   0000002C   0x2028             MOVS     R0,#+40
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000034   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   00000038   0xF11B 0x0B01      ADDS     R11,R11,#+1
     22          	SndBuf[ByteStation++] = sprotocolpara.sourceaddr;	 
   \   0000003C   0xF89D 0x0108      LDRB     R0,[SP, #+264]
   \   00000040   0xA901             ADD      R1,SP,#+4
   \   00000042   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000046   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   0000004A   0xF11B 0x0B01      ADDS     R11,R11,#+1
     23          	SndBuf[ByteStation++] = sprotocolpara.destaddr;				//地址
   \   0000004E   0xF89D 0x0109      LDRB     R0,[SP, #+265]
   \   00000052   0xA901             ADD      R1,SP,#+4
   \   00000054   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000058   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   0000005C   0xF11B 0x0B01      ADDS     R11,R11,#+1
     24          	SndBuf[ByteStation++] = sprotocolpara.framnum;
   \   00000060   0xF89D 0x010A      LDRB     R0,[SP, #+266]
   \   00000064   0xA901             ADD      R1,SP,#+4
   \   00000066   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000006A   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   0000006E   0xF11B 0x0B01      ADDS     R11,R11,#+1
     25          	SndBuf[ByteStation++] = (RS485_CHK_CRC<<4) + sprotocolpara.framcode;	
   \   00000072   0xF89D 0x010B      LDRB     R0,[SP, #+267]
   \   00000076   0x3010             ADDS     R0,R0,#+16
   \   00000078   0xA901             ADD      R1,SP,#+4
   \   0000007A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000007E   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   00000082   0xF11B 0x0B01      ADDS     R11,R11,#+1
     26          	SndBuf[ByteStation++] = sprotocolpara.datalen;
   \   00000086   0xF89D 0x0110      LDRB     R0,[SP, #+272]
   \   0000008A   0xA901             ADD      R1,SP,#+4
   \   0000008C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000090   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   00000094   0xF11B 0x0B01      ADDS     R11,R11,#+1
     27          	
     28          	DataLen = sprotocolpara.datalen;
   \   00000098   0xF89D 0x0110      LDRB     R0,[SP, #+272]
   \   0000009C   0x4682             MOV      R10,R0
     29          	
     30          	SumCheck8 = GetCheckSumNR(&SndBuf[2],5);		   	//索引区校验
   \   0000009E   0x2105             MOVS     R1,#+5
   \   000000A0   0xF10D 0x0006      ADD      R0,SP,#+6
   \   000000A4   0x.... 0x....      BL       GetCheckSumNR
   \   000000A8   0xF88D 0x0000      STRB     R0,[SP, #+0]
     31          
     32          	SndBuf[ByteStation++] = SumCheck8;
   \   000000AC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B0   0xA901             ADD      R1,SP,#+4
   \   000000B2   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000B6   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   000000BA   0xF11B 0x0B01      ADDS     R11,R11,#+1
     33          
     34          	memcpy(&SndBuf[8],sprotocolpara.databuf,DataLen);
   \   000000BE   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000C2   0x4652             MOV      R2,R10
   \   000000C4   0x9943             LDR      R1,[SP, #+268]
   \   000000C6   0xA803             ADD      R0,SP,#+12
   \   000000C8   0x.... 0x....      BL       memcpy
     35          
     36          	Crc16 = GetCrc16Check(&SndBuf[2],6+sprotocolpara.datalen);
   \   000000CC   0xF89D 0x0110      LDRB     R0,[SP, #+272]
   \   000000D0   0x1D81             ADDS     R1,R0,#+6
   \   000000D2   0xF10D 0x0006      ADD      R0,SP,#+6
   \   000000D6   0x.... 0x....      BL       GetCrc16Check
   \   000000DA   0x0006             MOVS     R6,R0
     37          	
     38          	SndBuf[2+6+DataLen+1] = Crc16;
   \   000000DC   0xA801             ADD      R0,SP,#+4
   \   000000DE   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000E2   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   000000E6   0x7246             STRB     R6,[R0, #+9]
     39          	SndBuf[2+6+DataLen]   = Crc16>>8;
   \   000000E8   0x0030             MOVS     R0,R6
   \   000000EA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000EC   0x0A00             LSRS     R0,R0,#+8
   \   000000EE   0xA901             ADD      R1,SP,#+4
   \   000000F0   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000F4   0xEB1A 0x0101      ADDS     R1,R10,R1
   \   000000F8   0x7208             STRB     R0,[R1, #+8]
     40          
     41          	csnrbuf[0] = SndBuf[0];						//准备数据发送
   \   000000FA   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000FE   0x7020             STRB     R0,[R4, #+0]
     42          	csnrbuf[1] = SndBuf[1];
   \   00000100   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000104   0x7060             STRB     R0,[R4, #+1]
     43          	
     44          	AddHeadNum = 0;
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x0007             MOVS     R7,R0
     45          	for(i = 2; i< 2+6+DataLen + 2;i++ )				//数据，补移位 FRAM_HERD0
   \   0000010A   0x2002             MOVS     R0,#+2
   \   0000010C   0x4680             MOV      R8,R0
   \                     ??DataPackage_CSNR_0: (+1)
   \   0000010E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000112   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000116   0xF11A 0x000A      ADDS     R0,R10,#+10
   \   0000011A   0x4580             CMP      R8,R0
   \   0000011C   0xDA1D             BGE.N    ??DataPackage_CSNR_1
     46          	{
     47          		csnrbuf[i+AddHeadNum] = SndBuf[i];
   \   0000011E   0xA801             ADD      R0,SP,#+4
   \   00000120   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000124   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   00000128   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000012C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000012E   0xEB17 0x0108      ADDS     R1,R7,R8
   \   00000132   0x5508             STRB     R0,[R1, R4]
     48          		
     49          		if(SndBuf[i] == FRAM_HERD0)
   \   00000134   0xA801             ADD      R0,SP,#+4
   \   00000136   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000013A   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   0000013E   0x2810             CMP      R0,#+16
   \   00000140   0xD108             BNE.N    ??DataPackage_CSNR_2
     50          		{
     51          			csnrbuf[i+AddHeadNum+1] = FRAM_HERD0;
   \   00000142   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000146   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000148   0xEB17 0x0008      ADDS     R0,R7,R8
   \   0000014C   0x1900             ADDS     R0,R0,R4
   \   0000014E   0x2110             MOVS     R1,#+16
   \   00000150   0x7041             STRB     R1,[R0, #+1]
     52          			AddHeadNum++;
   \   00000152   0x1C7F             ADDS     R7,R7,#+1
     53          		}
     54          	}
   \                     ??DataPackage_CSNR_2: (+1)
   \   00000154   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000158   0xE7D9             B.N      ??DataPackage_CSNR_0
     55          
     56          	csnrbuf[2+6+DataLen + 2 +AddHeadNum] 		= FRAM_END0;
   \                     ??DataPackage_CSNR_1: (+1)
   \   0000015A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000015E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000160   0xEB17 0x000A      ADDS     R0,R7,R10
   \   00000164   0x1900             ADDS     R0,R0,R4
   \   00000166   0x2110             MOVS     R1,#+16
   \   00000168   0x7281             STRB     R1,[R0, #+10]
     57          	csnrbuf[2+6+DataLen + 2 +AddHeadNum+1] 	= FRAM_END1;      
   \   0000016A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000016E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000170   0xEB17 0x000A      ADDS     R0,R7,R10
   \   00000174   0x1900             ADDS     R0,R0,R4
   \   00000176   0x212C             MOVS     R1,#+44
   \   00000178   0x72C1             STRB     R1,[R0, #+11]
     58          	
     59          	*csnrlen =  2+6+DataLen + 2 + AddHeadNum +2;
   \   0000017A   0xEB17 0x000A      ADDS     R0,R7,R10
   \   0000017E   0x300C             ADDS     R0,R0,#+12
   \   00000180   0x7028             STRB     R0,[R5, #+0]
     60          }
   \   00000182   0xB045             ADD      SP,SP,#+276
   \   00000184   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
     61          
     62          
     63          //数据解包，将接受到的数据解包到，stcCsnrProtocolPara信息
     64          //能简析，返回1；否则，返回0

   \                                 In section .text, align 2, keep-with-next
     65          unsigned char   DataUnpack_CSNR(stcCsnrProtocolPara *sprotocolpara,unsigned char	*RecBuf,unsigned char RecLen)
     66          {
   \                     DataUnpack_CSNR: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
     67              unsigned short		i,j,k;
     68              unsigned char			SumCheck8;
     69              unsigned char			Tmp;
     70              unsigned short		RecCRC16,Check16;
     71          		unsigned char			DataLen;
     72          		unsigned int			herdtimes = 0;
   \   0000000C   0xF05F 0x0B00      MOVS     R11,#+0
     73          		
     74          
     75            if(RecLen < 10)
   \   00000010   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0x2E0A             CMP      R6,#+10
   \   00000014   0xDA01             BGE.N    ??DataUnpack_CSNR_0
     76          		return 0;		
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE0CF             B.N      ??DataUnpack_CSNR_1
     77          	
     78          	for(j = 0;j < RecLen - herdtimes;j++ )														//去重复通讯首字节
   \                     ??DataUnpack_CSNR_0: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x4680             MOV      R8,R0
   \                     ??DataUnpack_CSNR_2: (+1)
   \   0000001E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0xEBB6 0x000B      SUBS     R0,R6,R11
   \   00000028   0x4580             CMP      R8,R0
   \   0000002A   0xD229             BCS.N    ??DataUnpack_CSNR_3
     79          	{
     80          		if(	 	
     81          				RecBuf[j] 	== FRAM_HERD0
     82          			&& 	RecBuf[j+1] == FRAM_HERD0
     83          		   )
   \   0000002C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000030   0xF818 0x0005      LDRB     R0,[R8, R5]
   \   00000034   0x2810             CMP      R0,#+16
   \   00000036   0xD120             BNE.N    ??DataUnpack_CSNR_4
   \   00000038   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003C   0xEB18 0x0005      ADDS     R0,R8,R5
   \   00000040   0x7840             LDRB     R0,[R0, #+1]
   \   00000042   0x2810             CMP      R0,#+16
   \   00000044   0xD119             BNE.N    ??DataUnpack_CSNR_4
     84          		{
     85          			for(k = j;k < RecLen - herdtimes; k++)
   \   00000046   0x46C1             MOV      R9,R8
   \                     ??DataUnpack_CSNR_5: (+1)
   \   00000048   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000004C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004E   0xEBB6 0x000B      SUBS     R0,R6,R11
   \   00000052   0x4581             CMP      R9,R0
   \   00000054   0xD20F             BCS.N    ??DataUnpack_CSNR_6
     86          			{
     87          				Tmp	 = RecBuf[k+1];
   \   00000056   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000005A   0xEB19 0x0005      ADDS     R0,R9,R5
   \   0000005E   0x7840             LDRB     R0,[R0, #+1]
   \   00000060   0xF88D 0x0000      STRB     R0,[SP, #+0]
     88          				
     89          				RecBuf[k] = Tmp;
   \   00000064   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000068   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000006C   0xF809 0x0005      STRB     R0,[R9, R5]
     90          			}
   \   00000070   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000074   0xE7E8             B.N      ??DataUnpack_CSNR_5
     91          			
     92          			herdtimes++;
   \                     ??DataUnpack_CSNR_6: (+1)
   \   00000076   0xF11B 0x0B01      ADDS     R11,R11,#+1
     93          		}
     94          	}
   \                     ??DataUnpack_CSNR_4: (+1)
   \   0000007A   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000007E   0xE7CE             B.N      ??DataUnpack_CSNR_2
     95          		
     96          
     97              for(i = 0; i < RecLen - herdtimes - 10;i++)												//循环遍历
   \                     ??DataUnpack_CSNR_3: (+1)
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x0007             MOVS     R7,R0
   \                     ??DataUnpack_CSNR_7: (+1)
   \   00000084   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000086   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000088   0xEBB6 0x000B      SUBS     R0,R6,R11
   \   0000008C   0x380A             SUBS     R0,R0,#+10
   \   0000008E   0x4287             CMP      R7,R0
   \   00000090   0xF080 0x8092      BCS.W    ??DataUnpack_CSNR_8
     98              {
     99          		if(		((RecBuf[i+0]) == FRAM_HERD0) 
    100          			&& 	((RecBuf[i+1]) == FRAM_HERD1)		
    101          		  )																		//报头
   \   00000094   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000096   0x5D78             LDRB     R0,[R7, R5]
   \   00000098   0x2810             CMP      R0,#+16
   \   0000009A   0xF040 0x808B      BNE.W    ??DataUnpack_CSNR_9
   \   0000009E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000A0   0x1978             ADDS     R0,R7,R5
   \   000000A2   0x7840             LDRB     R0,[R0, #+1]
   \   000000A4   0x2828             CMP      R0,#+40
   \   000000A6   0xF040 0x8085      BNE.W    ??DataUnpack_CSNR_9
    102          		{
    103          			DataLen = RecBuf[i+6];
   \   000000AA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000AC   0x1978             ADDS     R0,R7,R5
   \   000000AE   0x7980             LDRB     R0,[R0, #+6]
   \   000000B0   0x4682             MOV      R10,R0
    104          			if(		
    105          					(i+10+DataLen)  > RecLen							||
    106          			 		(RecBuf[i+10+DataLen] 	!= FRAM_END0)	||
    107          			 	 	(RecBuf[i+11+DataLen] 	!= FRAM_END1)
    108          			 )
   \   000000B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B4   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000B6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000BA   0xEB1A 0x0007      ADDS     R0,R10,R7
   \   000000BE   0x300A             ADDS     R0,R0,#+10
   \   000000C0   0x4286             CMP      R6,R0
   \   000000C2   0xDB11             BLT.N    ??DataUnpack_CSNR_10
   \   000000C4   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000C6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000CA   0xEB1A 0x0007      ADDS     R0,R10,R7
   \   000000CE   0x1940             ADDS     R0,R0,R5
   \   000000D0   0x7A80             LDRB     R0,[R0, #+10]
   \   000000D2   0x2810             CMP      R0,#+16
   \   000000D4   0xD108             BNE.N    ??DataUnpack_CSNR_10
   \   000000D6   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000D8   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000DC   0xEB1A 0x0007      ADDS     R0,R10,R7
   \   000000E0   0x1940             ADDS     R0,R0,R5
   \   000000E2   0x7AC0             LDRB     R0,[R0, #+11]
   \   000000E4   0x282C             CMP      R0,#+44
   \   000000E6   0xD000             BEQ.N    ??DataUnpack_CSNR_11
    109          			 {	
    110          			 //i = i + 10 + DataLen;											//地址不对或帧尾错误，跳过此帧
    111          			 	continue;
   \                     ??DataUnpack_CSNR_10: (+1)
   \   000000E8   0xE064             B.N      ??DataUnpack_CSNR_9
    112          			 }
    113          			SumCheck8 = GetCheckSumNR((unsigned char *)&RecBuf[i+2],5);		   				//索引区校验
   \                     ??DataUnpack_CSNR_11: (+1)
   \   000000EA   0x2105             MOVS     R1,#+5
   \   000000EC   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000EE   0x1978             ADDS     R0,R7,R5
   \   000000F0   0x1C80             ADDS     R0,R0,#+2
   \   000000F2   0x.... 0x....      BL       GetCheckSumNR
   \   000000F6   0xF88D 0x0001      STRB     R0,[SP, #+1]
    114          			
    115          			if(	SumCheck8 != 	RecBuf[i+7] )
   \   000000FA   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000FE   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000100   0x1979             ADDS     R1,R7,R5
   \   00000102   0x79C9             LDRB     R1,[R1, #+7]
   \   00000104   0x4288             CMP      R0,R1
   \   00000106   0xD155             BNE.N    ??DataUnpack_CSNR_9
    116          			{	
    117          				continue;
    118          			}
    119          			 
    120          			DataLen = RecBuf[i+6];
   \                     ??DataUnpack_CSNR_12: (+1)
   \   00000108   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000010A   0x1978             ADDS     R0,R7,R5
   \   0000010C   0x7980             LDRB     R0,[R0, #+6]
   \   0000010E   0x4682             MOV      R10,R0
    121          						
    122          			RecCRC16 = ((unsigned short)RecBuf[i+8+DataLen]) *256 + RecBuf[i+9+DataLen];	//校验	
   \   00000110   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000112   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000116   0xEB1A 0x0007      ADDS     R0,R10,R7
   \   0000011A   0x1940             ADDS     R0,R0,R5
   \   0000011C   0x7A00             LDRB     R0,[R0, #+8]
   \   0000011E   0xF44F 0x7180      MOV      R1,#+256
   \   00000122   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000124   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000128   0xEB1A 0x0207      ADDS     R2,R10,R7
   \   0000012C   0x1952             ADDS     R2,R2,R5
   \   0000012E   0x7A52             LDRB     R2,[R2, #+9]
   \   00000130   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000134   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    123          
    124          			switch(RecBuf[i+5]>>4)													//校验和算法判断
   \   00000138   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000013A   0x1978             ADDS     R0,R7,R5
   \   0000013C   0x7940             LDRB     R0,[R0, #+5]
   \   0000013E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000140   0x0900             LSRS     R0,R0,#+4
   \   00000142   0x2801             CMP      R0,#+1
   \   00000144   0xD004             BEQ.N    ??DataUnpack_CSNR_13
   \   00000146   0xD30F             BCC.N    ??DataUnpack_CSNR_14
   \   00000148   0x2803             CMP      R0,#+3
   \   0000014A   0xD00D             BEQ.N    ??DataUnpack_CSNR_15
   \   0000014C   0xD20C             BCS.N    ??DataUnpack_CSNR_14
    125          			{
    126          					case	RS485_CHK_SUM:
    127          									//Check16 = GetCheckSum16(&RecBuf[i+2],6+DataLen);
    128          									////PrintfCOM0(("\r\n 16位校验和！");
    129          									break;
   \                     ??DataUnpack_CSNR_16: (+1)
   \   0000014E   0xE00B             B.N      ??DataUnpack_CSNR_14
    130          					case	RS485_CHK_CRC:
    131          									Check16 = GetCrc16Check(&RecBuf[i+2],6+DataLen);
   \                     ??DataUnpack_CSNR_13: (+1)
   \   00000150   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000154   0xF11A 0x0106      ADDS     R1,R10,#+6
   \   00000158   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000015A   0x1978             ADDS     R0,R7,R5
   \   0000015C   0x1C80             ADDS     R0,R0,#+2
   \   0000015E   0x.... 0x....      BL       GetCrc16Check
   \   00000162   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    132          									////PrintfCOM0(("\r\n CRC校验！");
    133          									break;
   \   00000166   0xE7FF             B.N      ??DataUnpack_CSNR_14
    134          					case	RS485_CHK_RESUM:
    135          									break;
    136          			}
    137          			
    138          			if(			RecCRC16  ==	Check16 	 )
   \                     ??DataUnpack_CSNR_15: (+1)
   \                     ??DataUnpack_CSNR_14: (+1)
   \   00000168   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000016C   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000170   0x4288             CMP      R0,R1
   \   00000172   0xD11F             BNE.N    ??DataUnpack_CSNR_9
    139          			{
    140          				sprotocolpara->sourceaddr 	    = RecBuf[i+2];	
   \   00000174   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000176   0x1978             ADDS     R0,R7,R5
   \   00000178   0x7880             LDRB     R0,[R0, #+2]
   \   0000017A   0x7020             STRB     R0,[R4, #+0]
    141          				sprotocolpara->destaddr 		= RecBuf[i+3];	
   \   0000017C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000017E   0x1978             ADDS     R0,R7,R5
   \   00000180   0x78C0             LDRB     R0,[R0, #+3]
   \   00000182   0x7060             STRB     R0,[R4, #+1]
    142          				sprotocolpara->framnum   		= RecBuf[i+4];
   \   00000184   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000186   0x1978             ADDS     R0,R7,R5
   \   00000188   0x7900             LDRB     R0,[R0, #+4]
   \   0000018A   0x70A0             STRB     R0,[R4, #+2]
    143          				sprotocolpara->framcode  		= RecBuf[i+5]&0x0f;
   \   0000018C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000018E   0x1978             ADDS     R0,R7,R5
   \   00000190   0x7940             LDRB     R0,[R0, #+5]
   \   00000192   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000196   0x70E0             STRB     R0,[R4, #+3]
    144          				sprotocolpara->datalen     	= DataLen; 
   \   00000198   0xF884 0xA008      STRB     R10,[R4, #+8]
    145          				
    146          				memcpy(sprotocolpara->databuf,&RecBuf[i+8],DataLen);				//数据拷贝
   \   0000019C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000001A0   0x4652             MOV      R2,R10
   \   000001A2   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001A4   0x1978             ADDS     R0,R7,R5
   \   000001A6   0xF110 0x0108      ADDS     R1,R0,#+8
   \   000001AA   0x6860             LDR      R0,[R4, #+4]
   \   000001AC   0x.... 0x....      BL       memcpy
    147          				 
    148          				return	1;
   \   000001B0   0x2001             MOVS     R0,#+1
   \   000001B2   0xE002             B.N      ??DataUnpack_CSNR_1
    149          			}
    150          		}
    151          	}
   \                     ??DataUnpack_CSNR_9: (+1)
   \   000001B4   0x1C7F             ADDS     R7,R7,#+1
   \   000001B6   0xE765             B.N      ??DataUnpack_CSNR_7
    152            
    153              return	0;
   \                     ??DataUnpack_CSNR_8: (+1)
   \   000001B8   0x2000             MOVS     R0,#+0
   \                     ??DataUnpack_CSNR_1: (+1)
   \   000001BA   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    154          }
    155          

   \                                 In section .bss, align 1
    156          unsigned char   l_recslaveaddr = 0;
   \                     l_recslaveaddr:
   \   00000000                      DS8 1
    157          

   \                                 In section .bss, align 1
    158          uint8	l_recframnum = 0;
   \                     l_recframnum:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
    159          uint8	GetRecFramNum(void)
    160          {
    161          	return 	l_recframnum;
   \                     GetRecFramNum: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    162          }
    163          

   \                                 In section .bss, align 1
    164          uint8	l_FramNum = 0;
   \                     l_FramNum:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
    165          uint8	GetFramNum(void)
    166          {
    167          	return l_FramNum;		
   \                     GetFramNum: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_1
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    168          }
    169          

   \                                 In section .text, align 2, keep-with-next
    170          void	SetFramNum(uint8 num)
    171          {
    172          	l_FramNum = num;		
   \                     SetFramNum: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable5_1
   \   00000002   0x7008             STRB     R0,[R1, #+0]
    173          }
   \   00000004   0x4770             BX       LR               ;; return
    174          

   \                                 In section .text, align 2, keep-with-next
    175          void	AddFramNum(void)
    176          {
    177          	l_FramNum++;		
   \                     AddFramNum: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_1
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable5_1
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    178          }
   \   0000000A   0x4770             BX       LR               ;; return
    179          
    180          

   \                                 In section .text, align 2, keep-with-next
    181          unsigned char GetRecSlaveAddr(void)
    182          {
    183          	return	l_recslaveaddr;
   \                     GetRecSlaveAddr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    184          }
    185          

   \                                 In section .text, align 2, keep-with-next
    186          void	DataSend_CSNR(unsigned char SourceAddr,unsigned char DistAddr,unsigned char	*DataBuf,unsigned int	DataLen)
    187          {
   \                     DataSend_CSNR: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0FF             SUB      SP,SP,#+508
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
    188          	unsigned char	SndBuf[250] = {0};
   \   0000000E   0xA840             ADD      R0,SP,#+256
   \   00000010   0x21FC             MOVS     R1,#+252
   \   00000012   0x.... 0x....      BL       __aeabi_memclr4
    189          	unsigned char	SndBufTmp[250] = {0};
   \   00000016   0xA801             ADD      R0,SP,#+4
   \   00000018   0x21FC             MOVS     R1,#+252
   \   0000001A   0x.... 0x....      BL       __aeabi_memclr4
    190          	unsigned char	SumCheck8;
    191          	unsigned short	Crc16;
    192          	unsigned short	AddHeadNum;
    193          	unsigned short	i;
    194          	unsigned char	ByteStation;
    195          	static	unsigned char FramNum =0;						//序号
    196          	
    197          	ByteStation = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x4683             MOV      R11,R0
    198          	SndBuf[ByteStation++] = FRAM_HERD0;
   \   00000022   0x2010             MOVS     R0,#+16
   \   00000024   0xA940             ADD      R1,SP,#+256
   \   00000026   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000002A   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   0000002E   0xF11B 0x0B01      ADDS     R11,R11,#+1
    199          	SndBuf[ByteStation++] = FRAM_HERD1;
   \   00000032   0x2028             MOVS     R0,#+40
   \   00000034   0xA940             ADD      R1,SP,#+256
   \   00000036   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000003A   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   0000003E   0xF11B 0x0B01      ADDS     R11,R11,#+1
    200          	SndBuf[ByteStation++] = SourceAddr;	 
   \   00000042   0xA840             ADD      R0,SP,#+256
   \   00000044   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000048   0xF80B 0x4000      STRB     R4,[R11, R0]
   \   0000004C   0xF11B 0x0B01      ADDS     R11,R11,#+1
    201          	SndBuf[ByteStation++] = DistAddr;				//地址
   \   00000050   0xA840             ADD      R0,SP,#+256
   \   00000052   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000056   0xF80B 0x5000      STRB     R5,[R11, R0]
   \   0000005A   0xF11B 0x0B01      ADDS     R11,R11,#+1
    202          //	SndBuf[ByteStation++] = FramNum++;	
    203          	SndBuf[ByteStation++] = GetFramNum();
   \   0000005E   0x.... 0x....      BL       GetFramNum
   \   00000062   0xA940             ADD      R1,SP,#+256
   \   00000064   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000068   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   0000006C   0xF11B 0x0B01      ADDS     R11,R11,#+1
    204          	SndBuf[ByteStation++] = RS485_CHK_CRC<<4;	
   \   00000070   0x2010             MOVS     R0,#+16
   \   00000072   0xA940             ADD      R1,SP,#+256
   \   00000074   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000078   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   0000007C   0xF11B 0x0B01      ADDS     R11,R11,#+1
    205          	SndBuf[ByteStation++] = DataLen;
   \   00000080   0xA840             ADD      R0,SP,#+256
   \   00000082   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000086   0xF80B 0x7000      STRB     R7,[R11, R0]
   \   0000008A   0xF11B 0x0B01      ADDS     R11,R11,#+1
    206          	
    207          	SumCheck8 = GetCheckSumNR(&SndBuf[2],5);		   	//索引区校验
   \   0000008E   0x2105             MOVS     R1,#+5
   \   00000090   0xF50D 0x7081      ADD      R0,SP,#+258
   \   00000094   0x.... 0x....      BL       GetCheckSumNR
   \   00000098   0xF88D 0x0000      STRB     R0,[SP, #+0]
    208          
    209          	SndBuf[ByteStation++] = SumCheck8;
   \   0000009C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A0   0xA940             ADD      R1,SP,#+256
   \   000000A2   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000A6   0xF80B 0x0001      STRB     R0,[R11, R1]
   \   000000AA   0xF11B 0x0B01      ADDS     R11,R11,#+1
    210          
    211          	memcpy(&SndBuf[8],DataBuf,DataLen);
   \   000000AE   0x003A             MOVS     R2,R7
   \   000000B0   0x0031             MOVS     R1,R6
   \   000000B2   0xA842             ADD      R0,SP,#+264
   \   000000B4   0x.... 0x....      BL       memcpy
    212          
    213          	Crc16 = GetCrc16Check(&SndBuf[2],6+DataLen);
   \   000000B8   0x1DB9             ADDS     R1,R7,#+6
   \   000000BA   0xF50D 0x7081      ADD      R0,SP,#+258
   \   000000BE   0x.... 0x....      BL       GetCrc16Check
   \   000000C2   0x4680             MOV      R8,R0
    214          
    215          	//memcpy(&SndBuf[2+6+DataLen],(unsigned char *)&Crc16,sizeof(Crc16));
    216          	
    217          	SndBuf[2+6+DataLen+1] = Crc16;
   \   000000C4   0xA840             ADD      R0,SP,#+256
   \   000000C6   0x1838             ADDS     R0,R7,R0
   \   000000C8   0xF880 0x8009      STRB     R8,[R0, #+9]
    218          	SndBuf[2+6+DataLen]   = Crc16>>8;
   \   000000CC   0x4640             MOV      R0,R8
   \   000000CE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D0   0x0A00             LSRS     R0,R0,#+8
   \   000000D2   0xA940             ADD      R1,SP,#+256
   \   000000D4   0x1879             ADDS     R1,R7,R1
   \   000000D6   0x7208             STRB     R0,[R1, #+8]
    219          
    220          	SndBufTmp[0] = SndBuf[0];						//准备数据发送
   \   000000D8   0xF89D 0x0100      LDRB     R0,[SP, #+256]
   \   000000DC   0xF88D 0x0004      STRB     R0,[SP, #+4]
    221          	SndBufTmp[1] = SndBuf[1];
   \   000000E0   0xF89D 0x0101      LDRB     R0,[SP, #+257]
   \   000000E4   0xF88D 0x0005      STRB     R0,[SP, #+5]
    222          	
    223          	AddHeadNum = 0;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x4681             MOV      R9,R0
    224          	for(i = 2; i< 2+6+DataLen + 2;i++ )				//数据，补移位 FRAM_HERD0
   \   000000EC   0x2002             MOVS     R0,#+2
   \   000000EE   0x4682             MOV      R10,R0
   \                     ??DataSend_CSNR_0: (+1)
   \   000000F0   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000F4   0xF117 0x000A      ADDS     R0,R7,#+10
   \   000000F8   0x4582             CMP      R10,R0
   \   000000FA   0xD222             BCS.N    ??DataSend_CSNR_1
    225          	{
    226          		SndBufTmp[i+AddHeadNum] = SndBuf[i];
   \   000000FC   0xA840             ADD      R0,SP,#+256
   \   000000FE   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000102   0xF81A 0x0000      LDRB     R0,[R10, R0]
   \   00000106   0xA901             ADD      R1,SP,#+4
   \   00000108   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000010C   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000110   0xEB19 0x020A      ADDS     R2,R9,R10
   \   00000114   0x5450             STRB     R0,[R2, R1]
    227          		
    228          		if(SndBuf[i] == FRAM_HERD0)
   \   00000116   0xA840             ADD      R0,SP,#+256
   \   00000118   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000011C   0xF81A 0x0000      LDRB     R0,[R10, R0]
   \   00000120   0x2810             CMP      R0,#+16
   \   00000122   0xD10B             BNE.N    ??DataSend_CSNR_2
    229          		{
    230          			SndBufTmp[i+AddHeadNum+1] = FRAM_HERD0;
   \   00000124   0xA801             ADD      R0,SP,#+4
   \   00000126   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000012A   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000012E   0xEB19 0x010A      ADDS     R1,R9,R10
   \   00000132   0x1808             ADDS     R0,R1,R0
   \   00000134   0x2110             MOVS     R1,#+16
   \   00000136   0x7041             STRB     R1,[R0, #+1]
    231          			AddHeadNum++;
   \   00000138   0xF119 0x0901      ADDS     R9,R9,#+1
    232          		}
    233          	}
   \                     ??DataSend_CSNR_2: (+1)
   \   0000013C   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000140   0xE7D6             B.N      ??DataSend_CSNR_0
    234          
    235          	SndBufTmp[2+6+DataLen + 2 +AddHeadNum] = FRAM_END0;
   \                     ??DataSend_CSNR_1: (+1)
   \   00000142   0x2010             MOVS     R0,#+16
   \   00000144   0xA901             ADD      R1,SP,#+4
   \   00000146   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000014A   0xEB19 0x0207      ADDS     R2,R9,R7
   \   0000014E   0x1851             ADDS     R1,R2,R1
   \   00000150   0x7288             STRB     R0,[R1, #+10]
    236          	SndBufTmp[2+6+DataLen + 2 +AddHeadNum+1] = FRAM_END1;      
   \   00000152   0x202C             MOVS     R0,#+44
   \   00000154   0xA901             ADD      R1,SP,#+4
   \   00000156   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000015A   0xEB19 0x0207      ADDS     R2,R9,R7
   \   0000015E   0x1851             ADDS     R1,R2,R1
   \   00000160   0x72C8             STRB     R0,[R1, #+11]
    237          	
    238          	//地址判断
    239          //	if((DistAddr & 0xA0) == 0xA0)
    240          //	{
    241          //		SendCOM1(SndBufTmp, 2+6+DataLen + 2 +AddHeadNum +2) ;
    242              SendDataCom1(SndBufTmp, 2+6+DataLen + 2 +AddHeadNum +2) ;
   \   00000162   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000166   0xEB19 0x0007      ADDS     R0,R9,R7
   \   0000016A   0xF110 0x010C      ADDS     R1,R0,#+12
   \   0000016E   0xA801             ADD      R0,SP,#+4
   \   00000170   0x.... 0x....      BL       SendDataCom1
    243          	
    244          //	}
    245          //	else if((DistAddr & 0xC0) == 0xC0)
    246          //	{
    247          //		SendCom0(SndBufTmp, 2+6+DataLen + 2 +AddHeadNum +2) ; 	
    248          //	}
    249          //	else
    250          //	{
    251          //		SendCom0(SndBufTmp, 2+6+DataLen + 2 +AddHeadNum +2) ; 	
    252          //	}
    253          	//SendCOM1(SndBufTmp,2+6+DataLen + 2 + 2 + AddHeadNum);
    254          	//SendCOM0(SndBufTmp,2+6+DataLen + 2 + 2 + AddHeadNum);
    255          }
   \   00000174   0xB07F             ADD      SP,SP,#+508
   \   00000176   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    256          
    257          
    258          //----------------------------------------------------------------------------
    259          // ??    3?￡o   
    260          // 1|    ?ü￡o   ?ó
    261          // è??ú2?êy￡o   ?T
    262          // 3??ú2?êy￡o   ?T
    263          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    264          unsigned char  CSNR_GetData(unsigned char	*RecBuf,unsigned char RecLen,unsigned char	*DataBuf,unsigned char	*InfoLen)
    265          {
   \                     CSNR_GetData: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x001E             MOVS     R6,R3
    266              unsigned short		i,j,k;
    267              unsigned char		SumCheck8;
    268              unsigned char		Tmp;
    269              unsigned short		RecCRC16,Check16;
    270          	
    271          	unsigned char 		SourceAddr;	
    272          	unsigned char		DataLen;
    273          
    274            
    275          	for(j = 0;j < RecLen ;j++ )														//è￥???′í¨??ê××??ú
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x4683             MOV      R11,R0
   \                     ??CSNR_GetData_0: (+1)
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0x4583             CMP      R11,R0
   \   0000001A   0xD224             BCS.N    ??CSNR_GetData_1
    276          	{
    277          		if(	 	RecBuf[j] 	== FRAM_HERD0
    278          			&& 	RecBuf[j+1] == FRAM_HERD0
    279          		   )
   \   0000001C   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   00000020   0xF81B 0x0004      LDRB     R0,[R11, R4]
   \   00000024   0x2810             CMP      R0,#+16
   \   00000026   0xD11B             BNE.N    ??CSNR_GetData_2
   \   00000028   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   0000002C   0xEB1B 0x0004      ADDS     R0,R11,R4
   \   00000030   0x7840             LDRB     R0,[R0, #+1]
   \   00000032   0x2810             CMP      R0,#+16
   \   00000034   0xD114             BNE.N    ??CSNR_GetData_2
    280          		{
    281          			for(k = j;k < RecLen; k++)
   \   00000036   0x46DA             MOV      R10,R11
   \                     ??CSNR_GetData_3: (+1)
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000040   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000042   0x4582             CMP      R10,R0
   \   00000044   0xD20C             BCS.N    ??CSNR_GetData_2
    282          			{
    283          				Tmp	 = RecBuf[k+1]; 
   \   00000046   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000004A   0xEB1A 0x0004      ADDS     R0,R10,R4
   \   0000004E   0x7840             LDRB     R0,[R0, #+1]
   \   00000050   0x4680             MOV      R8,R0
    284          				
    285          				RecBuf[k] = Tmp;
   \   00000052   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000056   0xF80A 0x8004      STRB     R8,[R10, R4]
    286          			}
   \   0000005A   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   0000005E   0xE7EB             B.N      ??CSNR_GetData_3
    287          //201603			
    288          			//j++;
    289          		}
    290          	}
   \                     ??CSNR_GetData_2: (+1)
   \   00000060   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   00000064   0xE7D3             B.N      ??CSNR_GetData_0
    291          	
    292              for(i = 0; i < RecLen - 10;i++)												//?-?・±éàú
   \                     ??CSNR_GetData_1: (+1)
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x0007             MOVS     R7,R0
   \                     ??CSNR_GetData_4: (+1)
   \   0000006A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000006C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006E   0xF1B5 0x000A      SUBS     R0,R5,#+10
   \   00000072   0x4287             CMP      R7,R0
   \   00000074   0xF280 0x80A0      BGE.W    ??CSNR_GetData_5
    293              {
    294          		if(		((RecBuf[i+0]) == FRAM_HERD0) 
    295          			&& 	((RecBuf[i+1]) == FRAM_HERD1)		
    296          		  )																		//±¨í・
   \   00000078   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000007A   0x5D38             LDRB     R0,[R7, R4]
   \   0000007C   0x2810             CMP      R0,#+16
   \   0000007E   0xF040 0x8099      BNE.W    ??CSNR_GetData_6
   \   00000082   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000084   0x1938             ADDS     R0,R7,R4
   \   00000086   0x7840             LDRB     R0,[R0, #+1]
   \   00000088   0x2828             CMP      R0,#+40
   \   0000008A   0xF040 0x8093      BNE.W    ??CSNR_GetData_6
    297          		{
    298          			DataLen = RecBuf[i+6];
   \   0000008E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000090   0x1938             ADDS     R0,R7,R4
   \   00000092   0x7980             LDRB     R0,[R0, #+6]
   \   00000094   0x4681             MOV      R9,R0
    299          			//PrintfCOM0(("\r\n DataLen %d,%x,%x",DataLen,RecBuf[i+10+DataLen],RecBuf[i+11+DataLen]);
    300          			if(		
    301          					//	(RecBuf[i+2] != DeviceID) 				||
    302          					  //	(RecBuf[i+3] != HOST_ID) 				||
    303          						(i+10+DataLen)  > RecLen							|| 
    304          				 		(RecBuf[i+10+DataLen] 	!= FRAM_END0)	||
    305          				 	 	(RecBuf[i+11+DataLen] 	!= FRAM_END1)
    306          			 )
   \   00000096   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000098   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000009A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000009E   0xEB19 0x0007      ADDS     R0,R9,R7
   \   000000A2   0x300A             ADDS     R0,R0,#+10
   \   000000A4   0x4285             CMP      R5,R0
   \   000000A6   0xDB11             BLT.N    ??CSNR_GetData_7
   \   000000A8   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000AA   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000AE   0xEB19 0x0007      ADDS     R0,R9,R7
   \   000000B2   0x1900             ADDS     R0,R0,R4
   \   000000B4   0x7A80             LDRB     R0,[R0, #+10]
   \   000000B6   0x2810             CMP      R0,#+16
   \   000000B8   0xD108             BNE.N    ??CSNR_GetData_7
   \   000000BA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000BC   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000C0   0xEB19 0x0007      ADDS     R0,R9,R7
   \   000000C4   0x1900             ADDS     R0,R0,R4
   \   000000C6   0x7AC0             LDRB     R0,[R0, #+11]
   \   000000C8   0x282C             CMP      R0,#+44
   \   000000CA   0xD00C             BEQ.N    ??CSNR_GetData_8
    307          			 {	
    308          			 	//i = i + 10 + DataLen;											//μ??・2????ò???2′í?ó￡?ì?1y′???
    309          				  printfcom1("\r\n		(i+10+DataLen)  > RecLen	 %d,%d",i+10+DataLen,RecLen);	
   \                     ??CSNR_GetData_7: (+1)
   \   000000CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000CE   0x002A             MOVS     R2,R5
   \   000000D0   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000D2   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000D6   0xEB19 0x0007      ADDS     R0,R9,R7
   \   000000DA   0xF110 0x010A      ADDS     R1,R0,#+10
   \   000000DE   0x....             LDR.N    R0,??DataTable5_3
   \   000000E0   0x.... 0x....      BL       printfcom1
    310          				 continue;
   \   000000E4   0xE066             B.N      ??CSNR_GetData_6
    311          			 }
    312          
    313          			SumCheck8 = GetCheckSumNR((unsigned char *)&RecBuf[i+2],5);		   				//?÷òy??D￡?é
   \                     ??CSNR_GetData_8: (+1)
   \   000000E6   0x2105             MOVS     R1,#+5
   \   000000E8   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000EA   0x1938             ADDS     R0,R7,R4
   \   000000EC   0x1C80             ADDS     R0,R0,#+2
   \   000000EE   0x.... 0x....      BL       GetCheckSumNR
   \   000000F2   0xF88D 0x0001      STRB     R0,[SP, #+1]
    314          			 
    315          			 if(	SumCheck8 != 	RecBuf[i+7] )
   \   000000F6   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000FA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000FC   0x1939             ADDS     R1,R7,R4
   \   000000FE   0x79C9             LDRB     R1,[R1, #+7]
   \   00000100   0x4288             CMP      R0,R1
   \   00000102   0xD003             BEQ.N    ??CSNR_GetData_9
    316          			 {
    317          					
    318          				 printfcom1("\r\n sunche8  ");
   \   00000104   0x....             LDR.N    R0,??DataTable5_4
   \   00000106   0x.... 0x....      BL       printfcom1
    319          				 continue;
   \   0000010A   0xE053             B.N      ??CSNR_GetData_6
    320          			 }
    321          
    322          			SourceAddr = RecBuf[i+2];	
   \                     ??CSNR_GetData_9: (+1)
   \   0000010C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000010E   0x1938             ADDS     R0,R7,R4
   \   00000110   0x7880             LDRB     R0,[R0, #+2]
   \   00000112   0xF88D 0x0000      STRB     R0,[SP, #+0]
    323          			l_recslaveaddr = RecBuf[i+3];	
   \   00000116   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000118   0x1938             ADDS     R0,R7,R4
   \   0000011A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000011C   0x....             LDR.N    R1,??DataTable5_2
   \   0000011E   0x7008             STRB     R0,[R1, #+0]
    324          			l_recframnum   = RecBuf[i+4];
   \   00000120   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000122   0x1938             ADDS     R0,R7,R4
   \   00000124   0x7900             LDRB     R0,[R0, #+4]
   \   00000126   0x....             LDR.N    R1,??DataTable5
   \   00000128   0x7008             STRB     R0,[R1, #+0]
    325          			//PrintfCOM0(("\r\n o? %x",RecBuf[i+4]);				
    326          			DataLen = RecBuf[i+6];
   \   0000012A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000012C   0x1938             ADDS     R0,R7,R4
   \   0000012E   0x7980             LDRB     R0,[R0, #+6]
   \   00000130   0x4681             MOV      R9,R0
    327          			*InfoLen = DataLen; 
   \   00000132   0xF886 0x9000      STRB     R9,[R6, #+0]
    328          			
    329          						
    330          			RecCRC16 = ((unsigned short)RecBuf[i+8+DataLen]) *256 + RecBuf[i+9+DataLen];	//D￡?é	
   \   00000136   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000138   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000013C   0xEB19 0x0007      ADDS     R0,R9,R7
   \   00000140   0x1900             ADDS     R0,R0,R4
   \   00000142   0x7A00             LDRB     R0,[R0, #+8]
   \   00000144   0xF44F 0x7180      MOV      R1,#+256
   \   00000148   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000014A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000014E   0xEB19 0x0207      ADDS     R2,R9,R7
   \   00000152   0x1912             ADDS     R2,R2,R4
   \   00000154   0x7A52             LDRB     R2,[R2, #+9]
   \   00000156   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000015A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    331          
    332          			switch(RecBuf[i+5]>>4)													//D￡?éoí??・¨?D??
   \   0000015E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000160   0x1938             ADDS     R0,R7,R4
   \   00000162   0x7940             LDRB     R0,[R0, #+5]
   \   00000164   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000166   0x0900             LSRS     R0,R0,#+4
   \   00000168   0x2801             CMP      R0,#+1
   \   0000016A   0xD004             BEQ.N    ??CSNR_GetData_10
   \   0000016C   0xD30F             BCC.N    ??CSNR_GetData_11
   \   0000016E   0x2803             CMP      R0,#+3
   \   00000170   0xD00D             BEQ.N    ??CSNR_GetData_12
   \   00000172   0xD20C             BCS.N    ??CSNR_GetData_11
    333          			{
    334          					case	RS485_CHK_SUM:
    335          									//Check16 = GetCheckSum16(&RecBuf[i+2],6+DataLen);
    336          									////PrintfCOM0(("\r\n 16??D￡?éoí￡?");
    337          									break;
   \                     ??CSNR_GetData_13: (+1)
   \   00000174   0xE00B             B.N      ??CSNR_GetData_11
    338          					case	RS485_CHK_CRC:
    339          									Check16 = GetCrc16Check(&RecBuf[i+2],6+DataLen);
   \                     ??CSNR_GetData_10: (+1)
   \   00000176   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000017A   0xF119 0x0106      ADDS     R1,R9,#+6
   \   0000017E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000180   0x1938             ADDS     R0,R7,R4
   \   00000182   0x1C80             ADDS     R0,R0,#+2
   \   00000184   0x.... 0x....      BL       GetCrc16Check
   \   00000188   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    340          									////PrintfCOM0(("\r\n CRCD￡?é￡?");
    341          									break;
   \   0000018C   0xE7FF             B.N      ??CSNR_GetData_11
    342          					case	RS485_CHK_RESUM:
    343          									break;
    344          			}
    345          			
    346          			if(		RecCRC16  ==	Check16 	  )
   \                     ??CSNR_GetData_12: (+1)
   \                     ??CSNR_GetData_11: (+1)
   \   0000018E   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000192   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000196   0x4288             CMP      R0,R1
   \   00000198   0xD10C             BNE.N    ??CSNR_GetData_6
    347          			{
    348          				 memcpy(DataBuf,&RecBuf[i+8],DataLen);				//êy?Y??±′
   \   0000019A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000019E   0x464A             MOV      R2,R9
   \   000001A0   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001A2   0x1938             ADDS     R0,R7,R4
   \   000001A4   0xF110 0x0108      ADDS     R1,R0,#+8
   \   000001A8   0x9802             LDR      R0,[SP, #+8]
   \   000001AA   0x.... 0x....      BL       memcpy
    349          				 
    350          				 //return	1;				//SourceAddr
    351          				 return		SourceAddr;
   \   000001AE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001B2   0xE002             B.N      ??CSNR_GetData_14
    352          			}
    353          		}
    354          	}
   \                     ??CSNR_GetData_6: (+1)
   \   000001B4   0x1C7F             ADDS     R7,R7,#+1
   \   000001B6   0xE758             B.N      ??CSNR_GetData_4
    355            
    356              return	0;
   \                     ??CSNR_GetData_5: (+1)
   \   000001B8   0x2000             MOVS     R0,#+0
   \                     ??CSNR_GetData_14: (+1)
   \   000001BA   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    357          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     l_recframnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     l_FramNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     l_recslaveaddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000FD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0D 0x0A          DC8 "\015\012\t\t(i+10+DataLen)  > RecLen\t %d,%d"
   \              0x09 0x09    
   \              0x28 0x69    
   \              0x2B 0x31    
   \              0x30 0x2B    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x4C 0x65    
   \              0x6E 0x29    
   \              0x20 0x20    
   \              0x3E 0x20    
   \              0x52 0x65    
   \              0x63 0x4C    
   \              0x65 0x6E    
   \              0x09 0x20    
   \              0x25 0x64    
   \              0x2C 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x0D 0x0A          DC8 "\015\012 sunche8  "
   \              0x20 0x73    
   \              0x75 0x6E    
   \              0x63 0x68    
   \              0x65 0x38    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    358          
    359          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AddFramNum
      48   CSNR_GetData
        48   -> GetCheckSumNR
        48   -> GetCrc16Check
        48   -> memcpy
        48   -> printfcom1
     312   DataPackage_CSNR
       312   -> GetCheckSumNR
       312   -> GetCrc16Check
       312   -> __aeabi_memclr4
       312   -> memcpy
     544   DataSend_CSNR
       544   -> GetCheckSumNR
       544   -> GetCrc16Check
       544   -> GetFramNum
       544   -> SendDataCom1
       544   -> __aeabi_memclr4
       544   -> memcpy
      48   DataUnpack_CSNR
        48   -> GetCheckSumNR
        48   -> GetCrc16Check
        48   -> memcpy
       0   GetFramNum
       0   GetRecFramNum
       0   GetRecSlaveAddr
       0   SetFramNum


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
     256  ?_0
     252  ?_1
     252  ?_2
      36  ?_3
      16  ?_4
      12  AddFramNum
     446  CSNR_GetData
     392  DataPackage_CSNR
     378  DataSend_CSNR
     446  DataUnpack_CSNR
       6  GetFramNum
       6  GetRecFramNum
       6  GetRecSlaveAddr
       6  SetFramNum
       1  l_FramNum
       1  l_recframnum
       1  l_recslaveaddr

 
     3 bytes in section .bss
   812 bytes in section .rodata
 1 718 bytes in section .text
 
 1 718 bytes of CODE  memory
   812 bytes of CONST memory
     3 bytes of DATA  memory

Errors: none
Warnings: 17
