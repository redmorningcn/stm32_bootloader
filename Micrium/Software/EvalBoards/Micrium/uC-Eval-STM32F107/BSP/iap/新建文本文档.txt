#include <includes.h>
#include    "csnr_package_deal.h"

#define         FRAM_HERD0     		0x10         	//报文头
#define         FRAM_HERD1     		0x28       		//报文头				
#define     	HOST_ID      		10				//上位机地址	  		   
#define   		DEVICE_ID0      	15				//本机地址0	
#define   		DEVICE_ID1      	15				//本机地址1	
	   
#define			RS485_CHK_SUM		0x02			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
#define			RS485_CHK_CRC		0x01			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
#define			RS485_CHK_RESUM		0x03			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 

#define         FRAM_END0     		0x10         	//报文尾
#define         FRAM_END1     		0x2C       		//报文尾	

////////////////////////////////////mdk 0

 
//FLASH起始地址
#define STM32_FLASH_BASE            0x08000000 	//STM32 FLASH的起始地址
#define	USER_APP_START_ADDR		   (STM32_FLASH_BASE + 0x00010000)

//FLASH 扇区的起始地址
#define ADDR_FLASH_SECTOR_0     ((u32)0x08000000) 	//扇区0起始地址, 16 Kbytes  
#define ADDR_FLASH_SECTOR_1     ((u32)0x08004000) 	//扇区1起始地址, 16 Kbytes  
#define ADDR_FLASH_SECTOR_2     ((u32)0x08008000) 	//扇区2起始地址, 16 Kbytes  
#define ADDR_FLASH_SECTOR_3     ((u32)0x0800C000) 	//扇区3起始地址, 16 Kbytes  
#define ADDR_FLASH_SECTOR_4     ((u32)0x08010000) 	//扇区4起始地址, 64 Kbytes  
#define ADDR_FLASH_SECTOR_5     ((u32)0x08020000) 	//扇区5起始地址, 128 Kbytes  
#define ADDR_FLASH_SECTOR_6     ((u32)0x08040000) 	//扇区6起始地址, 128 Kbytes  
#define ADDR_FLASH_SECTOR_7     ((u32)0x08060000) 	//扇区7起始地址, 128 Kbytes  
#define ADDR_FLASH_SECTOR_8     ((u32)0x08080000) 	//扇区8起始地址, 128 Kbytes  
#define ADDR_FLASH_SECTOR_9     ((u32)0x080A0000) 	//扇区9起始地址, 128 Kbytes  
#define ADDR_FLASH_SECTOR_10    ((u32)0x080C0000) 	//扇区10起始地址,128 Kbytes  
#define ADDR_FLASH_SECTOR_11    ((u32)0x080E0000) 	//扇区11起始地址,128 Kbytes  

 

////////////////////////////////////////////

unsigned char   l_recslaveaddr = 0;
unsigned char GetRecSlaveAddr(void)
{
	return	l_recslaveaddr;
}
int  GetSysBaseTick(void);

uint32  GetSysTime(void)
{
    uint32    tmp64;
    tmp64 = GetSysBaseTick();
    
    return     (tmp64);      
}

void   DelayX10ms(u32   delay)
{
    uint32  i= 1000000;
    while(i--);


    return;
}
    


typedef  void (*pFunction)(void);			    //定义一个函数类型的参数.
pFunction   pApp;


uint8	l_recframnum = 0;
uint8	GetRecFramNum(void)
{
	return 	l_recframnum;
}

//----------------------------------------------------------------------------
// ??    3?￡o   
// 1|    ?ü￡o   ?ó
// è??ú2?êy￡o   ?T
// 3??ú2?êy￡o   ?T
//----------------------------------------------------------------------------
unsigned char  CSNR_GetData(unsigned char	*RecBuf,unsigned char RecLen,unsigned char	*DataBuf,unsigned char	*InfoLen)
{
    unsigned short		i,j,k;
    unsigned char		SumCheck8;
    unsigned char		Tmp;
    unsigned short		RecCRC16,Check16;
	
	unsigned char 		SourceAddr;	
	unsigned char		DataLen;

  
	for(j = 0;j < RecLen ;j++ )														//è￥???′í¨??ê××??ú
	{
		if(	 	RecBuf[j] 	== FRAM_HERD0
			&& 	RecBuf[j+1] == FRAM_HERD0
		   )
		{
			for(k = j;k < RecLen; k++)
			{
				Tmp	 = RecBuf[k+1]; 
				
				RecBuf[k] = Tmp;
			}
//201603			
			//j++;
		}
	}
	
    for(i = 0; i < RecLen - 10;i++)												//?-?・±éàú
    {
		if(		((RecBuf[i+0]) == FRAM_HERD0) 
			&& 	((RecBuf[i+1]) == FRAM_HERD1)		
		  )																		//±¨í・
		{
			DataLen = RecBuf[i+6];
			//PrintfCOM0(("\r\n DataLen %d,%x,%x",DataLen,RecBuf[i+10+DataLen],RecBuf[i+11+DataLen]);
			if(		
					//	(RecBuf[i+2] != DeviceID) 				||
					  //	(RecBuf[i+3] != HOST_ID) 				||
						(i+10+DataLen)  > RecLen							|| 
				 		(RecBuf[i+10+DataLen] 	!= FRAM_END0)	||
				 	 	(RecBuf[i+11+DataLen] 	!= FRAM_END1)
			 )
			 {	
			 	//i = i + 10 + DataLen;											//μ??・2????ò???2′í?ó￡?ì?1y′???
				  printfcom1("\r\n		(i+10+DataLen)  > RecLen	 %d,%d",i+10+DataLen,RecLen);	
				 continue;
			 }

			SumCheck8 = GetCheckSumNR((unsigned char *)&RecBuf[i+2],5);		   				//?÷òy??D￡?é
			 
			 if(	SumCheck8 != 	RecBuf[i+7] )
			 {
					
				 printfcom1("\r\n sunche8  ");
				 continue;
			 }

			SourceAddr = RecBuf[i+2];	
			l_recslaveaddr = RecBuf[i+3];	
			l_recframnum   = RecBuf[i+4];
			//PrintfCOM0(("\r\n o? %x",RecBuf[i+4]);				
			DataLen = RecBuf[i+6];
			*InfoLen = DataLen; 
			
						
			RecCRC16 = ((unsigned short)RecBuf[i+8+DataLen]) *256 + RecBuf[i+9+DataLen];	//D￡?é	

			switch(RecBuf[i+5]>>4)													//D￡?éoí??・¨?D??
			{
					case	RS485_CHK_SUM:
									//Check16 = GetCheckSum16(&RecBuf[i+2],6+DataLen);
									////PrintfCOM0(("\r\n 16??D￡?éoí￡?");
									break;
					case	RS485_CHK_CRC:
									Check16 = GetCrc16Check(&RecBuf[i+2],6+DataLen);
									////PrintfCOM0(("\r\n CRCD￡?é￡?");
									break;
					case	RS485_CHK_RESUM:
									break;
			}
			
			if(		RecCRC16  ==	Check16 	  )
			{
				 memcpy(DataBuf,&RecBuf[i+8],DataLen);				//êy?Y??±′
				 
				 //return	1;				//SourceAddr
				 return		SourceAddr;
			}
		}
	}
  
    return	0;
}


uint8	l_FramNum = 0;
uint8	GetFramNum(void)
{
	return l_FramNum;		
}

void	SetFramNum(uint8 num)
{
	l_FramNum = num;		
}

void	AddFramNum(void)
{
	l_FramNum++;		
}

void	DataSend_CSNR(unsigned char SourceAddr,unsigned char DistAddr,unsigned char	*DataBuf,unsigned int	DataLen)
{
	unsigned char	SndBuf[250] = {0};
	unsigned char	SndBufTmp[250] = {0};
	unsigned char	SumCheck8;
	unsigned short	Crc16;
	unsigned short	AddHeadNum;
	unsigned short	i;
	unsigned char	ByteStation;
	static	unsigned char FramNum =0;						//序号
	
	ByteStation = 0;
	SndBuf[ByteStation++] = FRAM_HERD0;
	SndBuf[ByteStation++] = FRAM_HERD1;
	SndBuf[ByteStation++] = SourceAddr;	 
	SndBuf[ByteStation++] = DistAddr;				//地址
//	SndBuf[ByteStation++] = FramNum++;	
	SndBuf[ByteStation++] = GetFramNum();
	SndBuf[ByteStation++] = RS485_CHK_CRC<<4;	
	SndBuf[ByteStation++] = DataLen;
	
	SumCheck8 = GetCheckSumNR(&SndBuf[2],5);		   	//索引区校验

	SndBuf[ByteStation++] = SumCheck8;

	memcpy(&SndBuf[8],DataBuf,DataLen);

	Crc16 = GetCrc16Check(&SndBuf[2],6+DataLen);

	//memcpy(&SndBuf[2+6+DataLen],(unsigned char *)&Crc16,sizeof(Crc16));
	
	SndBuf[2+6+DataLen+1] = Crc16;
	SndBuf[2+6+DataLen]   = Crc16>>8;

	SndBufTmp[0] = SndBuf[0];						//准备数据发送
	SndBufTmp[1] = SndBuf[1];
	
	AddHeadNum = 0;
	for(i = 2; i< 2+6+DataLen + 2;i++ )				//数据，补移位 FRAM_HERD0
	{
		SndBufTmp[i+AddHeadNum] = SndBuf[i];
		
		if(SndBuf[i] == FRAM_HERD0)
		{
			SndBufTmp[i+AddHeadNum+1] = FRAM_HERD0;
			AddHeadNum++;
		}
	}

	SndBufTmp[2+6+DataLen + 2 +AddHeadNum] = FRAM_END0;
	SndBufTmp[2+6+DataLen + 2 +AddHeadNum+1] = FRAM_END1;      
	
	//地址判断
//	if((DistAddr & 0xA0) == 0xA0)
//	{
//		SendCOM1(SndBufTmp, 2+6+DataLen + 2 +AddHeadNum +2) ;
    SendDataCom1(SndBufTmp, 2+6+DataLen + 2 +AddHeadNum +2) ;
	
//	}
//	else if((DistAddr & 0xC0) == 0xC0)
//	{
//		SendCom0(SndBufTmp, 2+6+DataLen + 2 +AddHeadNum +2) ; 	
//	}
//	else
//	{
//		SendCom0(SndBufTmp, 2+6+DataLen + 2 +AddHeadNum +2) ; 	
//	}
	//SendCOM1(SndBufTmp,2+6+DataLen + 2 + 2 + AddHeadNum);
	//SendCOM0(SndBufTmp,2+6+DataLen + 2 + 2 + AddHeadNum);
}




/*******************************************************************************
 * 名    称： IAP_JumpTo()
 * 功    能： 跳转到应用程序段
 * 入口参数：
 * 出口参数： 无
 * 作    者： 无名沈
 * 创建日期： 2014-04-23
 * 修    改： 
 * 修改日期： 
 *******************************************************************************/
void JMP_Boot(u32 appAddr)
{    
    u32     JumpAddress = 0;
    u8      cpu_sr;
        
    /***********************************************
    * 描述： 保存程序地址
    */
    //IAP_SetAppAddr(appAddr);
    /***********************************************
    * 描述： 关中断，防止值被中断修改
    */
    CPU_CRITICAL_ENTER();
    /***********************************************
    * 描述： 外设恢复默认，避免进入应用程序后影响程序正常运行
    */
    //IAP_DevDeInit();  
    /***********************************************
    * 描述： 获取应用入口及初始化堆栈指针
    */
    SCB->VTOR = USER_APP_START_ADDR & 0x1FFFFF80;	//??ò??D???òá?
    JumpAddress   =*(volatile u32*) (appAddr + 4); // 地址+4为PC地址
    pApp          = (pFunction)JumpAddress;         // 函数指针指向APP
//    __set_MSP       (*(volatile u32*) appAddr);    // 初始化主堆栈指针（MSP）
//    __set_PSP       (*(volatile u32*) appAddr);    // 初始化进程堆栈指针（PSP）
//    __set_CONTROL   (0);                            // 清零CONTROL
    /***********************************************
    * 描述： 跳转到APP程序
    */
    pApp();
    
    CPU_CRITICAL_EXIT();
}
//__asm void JMP_Boot( uint32_t address ){
//   LDR SP, [R0]		;Load new stack pointer address
//   LDR PC, [R0, #4]	;Load new program counter address
//}

#define zyIrqDisable()  CPU_INT_DIS()
#define zyIrqEnable()   CPU_INT_EN()


//启动app
void Boot( void )
{
//	 void (*userProgram)();   					           /*函数指针*/

	//SCB->VTOR = USER_APP_START_ADDR & 0x1FFFFF80;	//偏移中断向量
    //SCB->VTOR = USER_APP_START_ADDR & 0x1FFFFF80;	//偏移中断向量

	JMP_Boot(USER_APP_START_ADDR);
//	userProgram = (void (*)()) (USER_APP_START_ADDR+1);
//	(*userProgram)();													/*启动						*/	 
	
}

void Jumpto_APP(void)

{
    INT32U IapSpInitVal;

    INT32U IapJumpAddr;

    void (*pIapFun)(void);

    RCC_DeInit();//关闭外设

    NVIC_DeInit();

    //__disable_irq(); //关中断（）如IAP关中断 APP如果没用UCOS系统，APP

    //初始化后要开中断，用UCOS后，在起动任务后会开中断
    
    
    IapSpInitVal = *(INT32U *)USER_APP_START_ADDR;

    IapJumpAddr = *(INT32U *)(USER_APP_START_ADDR + 4);

    if((IapSpInitVal & 0x2FFE0000)==0x20000000)//检查栈顶地址是否合法.

    {
        __set_MSP (IapSpInitVal);

        pIapFun = (void (*)(void))IapJumpAddr;

        (*pIapFun) ();

    }

}


//#include "stmflash.h"
#include "usart.h" 
//////////////////////////////////////////////////////////////////////////////////	 
//本程序只供学习使用，未经作者许可，不得用于其它任何用途
//ALIENTEK STM32F407开发板
//STM32内部FLASH读写 驱动代码	   
//正点原子@ALIENTEK
//技术论坛:www.openedv.com
//创建日期:2014/5/9
//版本：V1.0
//版权所有，盗版必究。
//Copyright(C) 广州市星翼电子科技有限公司 2014-2024
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 

//#define	USER_APP_START_ADDR		    0x00010000 	

//读取指定地址的半字(16位数据) 
//faddr:读地址 
//返回值:对应数据.
u32 STMFLASH_ReadWord(u32 faddr)
{
	return *(vu32*)faddr; 
}  
//获取某个地址所在的flash扇区
//addr:flash地址
//返回值:0~11,即addr所在的扇区
//uint16_t STMFLASH_GetFlashSector(u32 addr)
//{
//	if(addr<ADDR_FLASH_SECTOR_1)return FLASH_Sector_0;
//	else if(addr<ADDR_FLASH_SECTOR_2)return FLASH_Sector_1;
//	else if(addr<ADDR_FLASH_SECTOR_3)return FLASH_Sector_2;
//	else if(addr<ADDR_FLASH_SECTOR_4)return FLASH_Sector_3;
//	else if(addr<ADDR_FLASH_SECTOR_5)return FLASH_Sector_4;
//	else if(addr<ADDR_FLASH_SECTOR_6)return FLASH_Sector_5;
//	else if(addr<ADDR_FLASH_SECTOR_7)return FLASH_Sector_6;
//	else if(addr<ADDR_FLASH_SECTOR_8)return FLASH_Sector_7;
//	else if(addr<ADDR_FLASH_SECTOR_9)return FLASH_Sector_8;
//	else if(addr<ADDR_FLASH_SECTOR_10)return FLASH_Sector_9;
//	else if(addr<ADDR_FLASH_SECTOR_11)return FLASH_Sector_10; 
//	return FLASH_Sector_11;	
//}
//从指定地址开始写入指定长度的数据
//特别注意:因为STM32F4的扇区实在太大,没办法本地保存扇区数据,所以本函数
//         写地址如果非0XFF,那么会先擦除整个扇区且不保存扇区数据.所以
//         写非0XFF的地址,将导致整个扇区数据丢失.建议写之前确保扇区里
//         没有重要数据,最好是整个扇区先擦除了,然后慢慢往后写. 
//该函数对OTP区域也有效!可以用来写OTP区!
//OTP区域地址范围:0X1FFF7800~0X1FFF7A0F
//WriteAddr:起始地址(此地址必须为4的倍数!!)
//pBuffer:数据指针
//NumToWrite:字(32位)数(就是要写入的32位数据的个数.) 
void STMFLASH_Write(u32 WriteAddr,u32 *pBuffer,u32 NumToWrite)	
{ 
  FLASH_Status status = FLASH_COMPLETE;
	u32 addrx=0;
	u32 endaddr=0;	
  if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
	FLASH_Unlock();									//解锁 
  //FLASH_DataCacheCmd(DISABLE);//FLASH擦除期间,必须禁止数据缓存
 		
	addrx=WriteAddr;				//写入的起始地址
	endaddr=WriteAddr+NumToWrite*4;	//写入的结束地址
    
	if(addrx<0X1FFF0000)			//只有主存储区,才需要执行擦除操作!!
	{
		while(addrx<endaddr)		//扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
		{
			if(STMFLASH_ReadWord(addrx)!=0XFFFFFFFF)//有非0XFFFFFFFF的地方,要擦除这个扇区
			{   
				//status=FLASH_EraseSector(STMFLASH_GetFlashSector(addrx),VoltageRange_3);//VCC=2.7~3.6V之间!!
				status = FLASH_ErasePage(addrx);
                if(status!=FLASH_COMPLETE)break;	//发生错误了
			}else addrx+=4;
		} 
	}
    
	if(status==FLASH_COMPLETE)
	{
		while(WriteAddr<endaddr)//写数据
		{
			if(FLASH_ProgramWord(WriteAddr,*pBuffer)!=FLASH_COMPLETE)//写入数据
			{ 
				break;	//写入异常
			}
			WriteAddr+=4;
			pBuffer++;
		} 
	}
 // FLASH_DataCacheCmd(ENABLE);	//FLASH擦除结束,开启数据缓存
	FLASH_Lock();//上锁
} 

//从指定地址开始读出指定长度的数据
//ReadAddr:起始地址
//pBuffer:数据指针
//NumToRead:字(4位)数
void STMFLASH_Read(u32 ReadAddr,u32 *pBuffer,u32 NumToRead)   	
{
	u32 i;
	for(i=0;i<NumToRead;i++)
	{
		pBuffer[i]=STMFLASH_ReadWord(ReadAddr);//读取4个字节.
		ReadAddr+=4;//偏移4个字节.	
	}
}
typedef  void (*iapfun)(void);				//定义一个函数类型的参数.   

iapfun jump2app; 
u32 iapbuf[512]; 	//2K字节缓存  
//appxaddr:应用程序的起始地址
//appbuf:应用程序CODE.
//appsize:应用程序大小(字节).
void iap_write_appbin(u32 appxaddr,u8 *appbuf,u32 appsize)
{
	u32 t;
	u16 i=0;
	u32 temp;
	u32 fwaddr=appxaddr;//当前写入的地址
	u8 *dfu=appbuf;
	for(t=0;t<appsize;t+=4)
	{						   
		temp =(u32)dfu[3]<<24;   
		temp|=(u32)dfu[2]<<16;    
		temp|=(u32)dfu[1]<<8;
		temp|=(u32)dfu[0];	  
		dfu +=4;//偏移4个字节
		iapbuf[i++]=temp;	    
		if( i==512 )
		{
			i=0; 
			STMFLASH_Write(fwaddr,iapbuf,512);
			fwaddr+=2048;//偏移2048  512*4=2048
		}
	} 
	if(i)STMFLASH_Write(fwaddr,iapbuf,i);//将最后的一些内容字节写进去.  
}

//跳转到应用程序段
//appxaddr:用户代码起始地址.
void iap_load_app(u32 appxaddr)
{
	if(((*(vu32*)appxaddr)&0x2FFE0000)==0x20000000)	//检查栈顶地址是否合法.
	{ 
		jump2app=(iapfun)*(vu32*)(appxaddr+4);		//用户代码区第二个字为程序开始地址(复位地址)		
		MSR_MSP(*(vu32*)appxaddr);					//初始化APP堆栈指针(用户代码区的第一个字用于存放栈顶地址)
		jump2app();									//跳转到APP.
	}
}		 

//对flash 进行擦写
//默认进入长度len=128
#define		MAX_SEC_NUM   22
void	IAP_pragramDeal(uint8	*buf,uint32	len)
{
	static	uint32	curaddr = USER_APP_START_ADDR;
	static	uint8	iapbuf[2048];
	static	uint32	iapbuflen = 0;
	static	uint8   times = 0;
    
    CPU_SR_ALLOC();
    times++;
    memcpy(&iapbuf[iapbuflen],buf,len);     //
    
    iapbuflen +=len;
	   
    if(times == 1024/128 || len != 128)
    {
        if(len != 128)
        {
            for(u32 i = iapbuflen;i<1024;i++ )
                iapbuf[i] = 0xff;	
        }


        zyIrqDisable();										//关中断
        
        iap_write_appbin(curaddr,iapbuf,1024);

        zyIrqEnable();
        
        curaddr += 1024;
        times = 0;
        iapbuflen = 0;
    }
		//DelayX10ms(2);	
}

void iwdg_init(void){
    IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);//??IWDG_PR?IWDG_RLR????
    IWDG_SetReload(0xfff);//???????0xfff
    IWDG_SetPrescaler(IWDG_Prescaler_64);//????????32   
    IWDG_Enable();//?????
}

void    FeedDog(void)
{
    IWDG_ReloadCounter();
}

extern	unsigned char  CSNR_GetData(unsigned char	*RecBuf,unsigned char RecLen,unsigned char	*DataBuf,unsigned char	*InfoLen) ;
void    IAP_ProgramCopy(void);

void	IAP_PragramTask(void)
{
		static	uint32  	time = 0;
		static	uint8		praflg = 0;
		
		uint8		recbuf[256];
		uint8		databuf[256];
		uint32		reclen 	= 0;	
		uint32		datalen = 0;
		uint32		tmp;
		char		startstring[]={"IAP_pragram start!"};
		char		pramstring[]={"."};
		char		holdstring[]={"!"};
		char		endstring[]={"IAP_pragram end!"};
		char		*p;
		uint32		i;
		static		uint8	lstrecnum = 0;
        
        printfcom1("\r\n boot V1.01");

		time = GetSysTime();
		while(1)
		{
            DelayX10ms(1);
            
            HoldUartRecSta();
            
            tmp = ReadUartBuf(recbuf,sizeof(recbuf));   //è?′??úêy?Y

            //if(GetFramRecEndFlgIAP())
            if(tmp )
            {
//                tmp = ReadRs485DataIAP(recbuf);
//                ClearFramRecEndFlgIAP();
                if(tmp == 0)
                    continue ;

                CSNR_GetData(recbuf,tmp,databuf,(uint8 *)&datalen); 

                if(praflg == 0)
                {
                    databuf[datalen] = '\0';
                    
                    if(strcmp((char *)&databuf[0],startstring) == 0)				//±à3ì?D?¨
                    {
                        lstrecnum = GetRecFramNum();
                        SetFramNum(lstrecnum);

                        praflg = 1;
                        DataSend_CSNR(0x80,0xA1,startstring,strlen(startstring));	   
                    
                        printfcom1(" s:%s\r\n",startstring);
                        time = GetSysTime();							
                        continue ;
                        //return;
                    }
                } 
                else																					
                {
                    printfcom1("\r\n lstrecnum %x,%x",lstrecnum, GetFramNum());
                    if(lstrecnum == GetRecFramNum())
                    {
                            DataSend_CSNR(0x80,0xA1,holdstring,strlen(holdstring));	
                            time = GetSysTime();
                    }
                    else
                    {	
                        lstrecnum = GetRecFramNum();
                        SetFramNum(lstrecnum);

                        IAP_pragramDeal(databuf,datalen);					//±à3ì						   	
#ifdef CVI													
                        databuf[datalen] = '\0';
                        printfcom1texbox(databuf);
#endif				
                        DataSend_CSNR(0x80,0xA1,pramstring,strlen(pramstring));	 
                        printfcom1("%s",pramstring);
                        
                        if(datalen != 128)												//?áê?±à3ì
                        {	
                            DataSend_CSNR(0x80,0xA1,endstring,strlen(endstring));	
                            printfcom1("\r\n len != 128");
                            break;
                        }

                        time = GetSysTime();
                    }
                }
            }
            
            if(praflg == 0)
            {
                if(GetSysTime() - time > 1000)										//í?3?
                {
                    printfcom1("\r\nGetSysTime() - time > 1000");
                    break;
                }
            }
            else
            {
                if(GetSysTime() - time > 2000)										//í?3?
                {
                    printfcom1("\r\nGetSysTime() - time > 1000");
                    break;
                }
            }
		}	
		
//		p =  (uint8 *)USER_APP_START_ADDR;
//		for(i = 0;i < 0x20000;i++ )
//		{
//			printfcom1("%02x",*p);
//			p++;
//		}

        //20170812 D???±?・Y????±′1|?ü?￡
        
        IAP_ProgramCopy();
        
		printfcom1("\r\n boot end");
        
        iwdg_init();
        FeedDog();
		//Boot();
        Jumpto_APP();
}


typedef  struct   _stcIAPPara_
{
    uint16  hardver;        //????
    uint16  softver;        //????
    uint32  softsize;       //????
    uint32  addr;           //????
    uint32  framenum;       //???
    uint16  code;           //??? 01,????????
    uint16  crc16;
}stcIAPPara;

#define	IAP_PARA_START_ADDR     (STM32_FLASH_BASE + 0x00030000)
#define	IAP_PARA_PRO_SIZE		0x0000FFFF	



/*******************************************************************************
 * ?    ?: IAP_WriteParaFlash
 * ?    ?: ?IAP??????Flash?
 * ????: stcIAPCtrl
 * ????: ?
 * ?  ?: redmorningcn.
 * ????: 2017-08-08
 * ?    ?:
 * ????:
 *******************************************************************************/
void    IAP_ReadParaFlash(stcIAPPara *sIAPPara)
{
    CPU_SR_ALLOC();

    uint32_t result[4];
    
    zyIrqDisable();                                 //???
    
    memcpy((uint8 *)sIAPPara,(uint8 *)IAP_PARA_START_ADDR,sizeof(stcIAPPara));
            
    zyIrqEnable();                                  //?????
}


/*******************************************************************************
 * ?    ?: IAP_WriteParaFlash
 * ?    ?: ?IAP??????Flash?
 * ????: stcIAPCtrl
 * ????: ?
 * ?  ?: redmorningcn.
 * ????: 2017-08-08
 * ?    ?:
 * ????:
 *******************************************************************************/
void    IAP_WriteParaFlash(stcIAPPara *sIAPPara)
{
    CPU_SR_ALLOC();

    //IAP_STATUS_CODE status;
    uint32_t result[4];

    uint32_t flash_prog_area_sec_start;
    uint32_t flash_prog_area_sec_end;
    
    zyIrqDisable();										                                //???

//    flash_prog_area_sec_start   = 	GetSecNum(IAP_PARA_START_ADDR);
//    flash_prog_area_sec_end 	=  	GetSecNum(IAP_PARA_START_ADDR + IAP_PARA_PRO_SIZE); //????
//
//    status = EraseSector(flash_prog_area_sec_start, flash_prog_area_sec_end);           //??????
//    status = BlankCheckSector(flash_prog_area_sec_start, flash_prog_area_sec_end,
//                &result[0], &result[1]);
    
     iap_write_appbin(     IAP_PARA_START_ADDR,
                            (uint8 *)sIAPPara,
                            256
                            );           
    //??flash??,??????
//    status 	= CopyRAM2Flash( (uint8_t *)IAP_PARA_START_ADDR,
//                                  (uint8 *)sIAPPara,
//                                   256
//                            );                                                          //????
//    
//    status =  Compare((uint8_t *)IAP_PARA_START_ADDR,
//                            (uint8 *)sIAPPara,
//                            sizeof(stcIAPPara)
//                    );                                                                  //????
            
    zyIrqEnable();                                                                      //?flash???,?????
}

#define	USER_APP_START_ADDR		(STM32_FLASH_BASE + 0x00010000	)
#define	USER_APP_PRO_SIZE		0x0002FFFF	

#define	USER_BACK_START_ADDR	(STM32_FLASH_BASE + 0x00040000	)

#define IAP_WRITE_1024          1024
/*******************************************************************************
 * ?    ?: IAP_WriteFlash
 * ?    ?: ?????Flash?
 * ????: stcIAPCtrl
 * ????: ?
 * ?  ?: redmorningcn.
 * ????: 2017-08-08
 * ?    ?:
 * ????:
 *******************************************************************************/
void    IAP_CopyAppToFlash(stcIAPPara *sIAPPara)
{
    //IAP_STATUS_CODE status;
    CPU_SR_ALLOC();
    uint32_t result[4];
    //?áè?flashêy?Y
    uint32_t finshlen = 0;
    uint8 buf[1024];
    int i;
    
    uint32_t flash_prog_area_sec_start;
    uint32_t flash_prog_area_sec_end;

    zyIrqDisable();										//???
    
    //2?3y??òaD′μ???óò
//    flash_prog_area_sec_start   = 	GetSecNum(USER_APP_START_ADDR);
//    flash_prog_area_sec_end 	=  	GetSecNum(USER_APP_START_ADDR + USER_APP_PRO_SIZE);//????
//
//    status = EraseSector(flash_prog_area_sec_start, flash_prog_area_sec_end);           //???????
//
//    status = BlankCheckSector(flash_prog_area_sec_start, flash_prog_area_sec_end,
//                  &result[0], &result[1]);

    finshlen = 0;
    //μ??・?????òò?μ?êy?Y??3¤?è￡?í?3?
    while(  finshlen < USER_APP_PRO_SIZE 
        &&  finshlen < sIAPPara->softsize )
    
    {
        memcpy(buf,(uint8 *)(USER_BACK_START_ADDR + finshlen),IAP_WRITE_1024);   //è?backup????êy?Y
        
//        status 	= CopyRAM2Flash((uint8 *)(USER_APP_START_ADDR + finshlen),       //??backup??êy?YD′è?app??   
//                                         buf,
//                                         IAP_WRITE_1024
//                                );                      
        iap_write_appbin((USER_APP_START_ADDR + finshlen),       //??backup??êy?YD′è?app??   
                                         buf,
                                         IAP_WRITE_1024);
//        status =  Compare((uint8 *)(USER_APP_START_ADDR + finshlen),             //±è??D′è??úèY     
//                                     buf,
//                                     IAP_WRITE_1024
//                                );
        
        finshlen += IAP_WRITE_1024;                     //μ??・à??ó  
        
        //for(i = 0; i< IAP_WRITE_1024;i++)
        {
        //    printfcom1("%02x",buf[i]);
        }
        FeedDog();
    }   
    
    zyIrqEnable();                                  //?flash???,?????   0731-22689503   6246  7405
}
#define     IAP_COPY_BACK_APP    0x01
/*******************************************************************************
 * ?    ?: IAP_WriteFlash
 * ?    ?: ?????Flash?
 * ????: stcIAPCtrl
 * ????: ?
 * ?  ?: redmorningcn.
 * ????: 2017-08-08
 * ?    ?:
 * ????:
 *******************************************************************************/
void    IAP_ProgramCopy(void)
{
    uint16  crc16;
    
    stcIAPPara  sIapPara;
        
    IAP_ReadParaFlash(&sIapPara);                          //?áIAP2?êy
    
    crc16 = GetCrc16Check((uint8 *)&sIapPara,sizeof(stcIAPPara)-2);  //??D￡?é
    
    FeedDog();

    if( crc16 == sIapPara.crc16 &&                          //D￡?é?yè・￡??òcopy??á?￡??ò?′DDcopy2ù×÷,
        sIapPara.code == IAP_COPY_BACK_APP &&               //êy?Y?? êy?Y′óD? ê?・?óDD§
        sIapPara.softsize > 0x100 &&
        sIapPara.softsize < USER_APP_PRO_SIZE
      )
    {
        // printfcom1("\r\n???ˉ?ó??.....\r\n");

        IAP_CopyAppToFlash(&sIapPara);                      //êy?Y′óback??copy?áapp??

        sIapPara.code   = 0;
        crc16 = GetCrc16Check((uint8 *)&sIapPara,sizeof(stcIAPPara)-2);  //????D￡?é
        sIapPara.crc16  = crc16;             
        //DT??copy??á?￡???D?D′è?
        IAP_WriteParaFlash(&sIapPara);
    
    }
}
